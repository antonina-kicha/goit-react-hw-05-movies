{"version":3,"file":"static/js/159.4513986c.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAS,mCAGFC,EAAgB,mCAAG,oGACLF,EAAAA,EAAAA,IAAA,WAHO,qBAGP,oBAAmDC,IAD9C,cACtBE,EADsB,yBAErBA,EAASC,MAFY,2CAAH,qDAMhBC,EAAgB,mCAAG,WAAOC,GAAP,uFACLN,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,qDAAsFK,IADjF,cACtBH,EADsB,OAE5BI,QAAQC,IAAIL,EAASC,MAFO,kBAGrBD,EAASC,MAHY,2CAAH,sDAOhBK,EAAiB,mCAAG,WAAOC,GAAP,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,oBAAkCT,EAAlC,oBADM,cACvBE,EADuB,OAE7BI,QAAQC,IAAIL,EAASC,MAFQ,kBAGtBD,EAASC,MAHa,2CAAH,sDAMjBO,EAAW,mCAAG,WAAOD,GAAP,uFACAV,EAAAA,EAAAA,IAAA,gBAAmBU,EAAnB,4BAAyCT,EAAzC,oBADA,cACjBE,EADiB,OAEnBI,QAAQC,IAAIL,EAASC,MAFF,kBAGhBD,EAASC,MAHO,2CAAH,sDAMXQ,EAAY,mCAAG,WAAOF,GAAP,uFACDV,EAAAA,EAAAA,IAAA,kBAAqBU,EAArB,4BAA2CT,EAA3C,oBADC,cAClBE,EADkB,OAExBI,QAAQC,IAAIL,EAASC,MAFG,kBAGjBD,EAASC,MAHQ,2CAAH,qD,8JC5BZS,EAAkBC,EAAAA,GAAAA,IAAH,0CAIfC,GAAQD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,6FAOLG,EAASH,EAAAA,GAAAA,OAAH,qD,0BCVNI,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnBC,GAAWC,EAAAA,EAAAA,MACTC,GAAgBC,EAAAA,EAAAA,MAAhBD,YAER,OACI,4BACI,uBAAIA,KACR,wBACKH,EAAOK,KAAI,SAAAC,GAAK,OACb,yBACI,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAMf,IAAMiB,MAAS,CAAEC,KAAMR,GAAlD,UAA+DK,EAAMI,MAArE,QADKJ,EAAMf,GADF,QAO5B,EC6CD,EA1De,WAEX,OAA0BoB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAec,EAAf,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMd,EAAca,EAAaE,IAAI,eA+BrC,OAtBAC,EAAAA,EAAAA,YAAU,WAAM,wCAIZ,gHAE+BjC,EAAAA,EAAAA,IAAiBiB,GAFhD,UAGwC,KAD1BnB,EAFd,QAGqBoC,QAAQC,OAH7B,uBAIYR,EAAS,yCAAD,OAA0CV,EAA1C,MAJpB,0BAOcmB,EAAYtC,EAASoC,QAC3BN,EAAUQ,GARlB,kDAWQlC,QAAQC,IAAR,MAXR,2DAJY,sBACPc,GADO,mCAkBZoB,EAEH,GAAE,CAACpB,KAGA,UAACT,EAAD,YACI,SAAC,KAAD,CACI8B,cAAe,CACXC,gBAAiB,IAErBC,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,WAnCZ,SAACzC,GAClB,IAAM0C,EAAkB1C,EAAM2C,OAC9Bb,EAAgB,CAAEd,YAAa0B,IAExBhB,EADFgB,EACW,GADiB,kDAEpC,CA+BeE,CAAaJ,EAAOF,iBACpBG,GACH,EAPL,UAQI,UAAC,KAAD,YACI,SAAChC,EAAD,CAAOL,GAAG,kBAAkByC,KAAK,qBACjC,SAAClC,EAAD,CAAQmC,KAAK,SAAb,yBAGPrB,IAAS,uBAAIA,KACd,SAACb,EAAD,CAAYC,OAAQA,EAAQkC,OAAQ/B,MAG/C,C","sources":["api.js","pages/Movies/Movies.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst apiKEY = 'ba2cd44587703e13bcb95a3f3a9b39ac';\nconst searchParametrTrendingDay = 'trending/movie/day';\n\nexport const fetchTrendingDay = async () => {\n    const responce = await axios.get(`/${searchParametrTrendingDay}?api_key=${apiKEY}`);\n    return responce.data;\n}\n\n\nexport const fetchSearchMovie = async (value) => {\n    const responce = await axios.get(`/search/movie?api_key=${apiKEY}&language=en-US&include_adult=false&query=${value}`);\n    console.log(responce.data);\n    return responce.data;\n}\n\n\nexport const fetchMovieDetails = async (id) => {\n    const responce = await axios.get(`/movie/${id}?api_key=${apiKEY}&language=en-US`);\n    console.log(responce.data);\n    return responce.data;\n}\n\nexport const fetchActors = async (id) => {\n    const responce = await axios.get(`movie/${id}/credits?api_key=${apiKEY}&language=en-US`);\n        console.log(responce.data);\n    return responce.data;\n}\n\nexport const fetchReviews = async (id) => {\n    const responce = await axios.get(`/movie//${id}/reviews?api_key=${apiKEY}&language=en-US`);\n    console.log(responce.data);\n    return responce.data;\n}\n\n","import styled from \"styled-components\";\nimport { Field } from 'formik';\n\nexport const ContainerMovies = styled.div`\npadding: 20px 0;\n`;\n\nexport const Input = styled(Field)`\nwidth: 300px;\nheight: 30px;\nmargin-right: 10px;\nfont-size: 16px;\n`;\n\nexport const Button = styled.button`\nheight: 33px;\nwidth: 80px;\n`;\n    ","import PropTypes from 'prop-types';\nimport { Link, useParams } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const MoviesList = ({ movies }) => {\n\n    const location = useLocation();\n    const { searchQuery } = useParams();\n\n    return (\n        <div>\n            <p>{searchQuery}</p>\n        < ul >\n            {movies.map(movie => \n                <li key={movie.id}>\n                    <Link to={`/movies/${movie.id}`} state = {{ from: location }}>{movie.title} </Link>\n                </li>)}\n            </ul >\n            </div>\n    )\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.array,\n}\n","import {fetchSearchMovie} from 'api'\nimport React, { useEffect, useState } from 'react';\nimport { Formik , Form } from 'formik';\nimport { ContainerMovies, Input, Button } from './Movies.styled';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useSearchParams } from \"react-router-dom\";\n\nconst Movies = () => {\n    \n    const [error, setError] = useState('');\n    const [movies, setMovies] = useState([]);\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchQuery = searchParams.get(\"searchQuery\");\n\n    const handleSubmit = (value) => {\n        const searchQueryTrim = value.trim();\n        setSearchParams({ searchQuery: searchQueryTrim })\n        if (!searchQueryTrim) { setError(`Enter a search query to find the desired movie `) }\n        else { setError('') };\n    }\n\n    useEffect(() => {\n        if (!searchQuery) {\n            return;\n        }\n        async function getMovieBySearchQuery() {\n            try {\n                const responce = await fetchSearchMovie(searchQuery);\n                if (responce.results.length === 0) {\n                    setError(`No movies were found by the request  \"${searchQuery}\"`);\n                    return;\n                }\n                const moviesNew = responce.results;\n                setMovies(moviesNew);\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        getMovieBySearchQuery();\n\n    }, [searchQuery])\n\n    return (\n        <ContainerMovies>\n            <Formik\n                initialValues={{\n                    searchQueryForm: '',\n                }}\n                onSubmit={(values, { resetForm }) => {\n                    handleSubmit(values.searchQueryForm);\n                    resetForm();\n                }}>\n                <Form>\n                    <Input id=\"searchQueryForm\" name=\"searchQueryForm\" />\n                    <Button type=\"submit\">Search</Button>\n                </Form>\n            </Formik>\n            {error && <p>{error}</p>}\n            <MoviesList movies={movies} filter={searchQuery} />\n        </ContainerMovies>\n    )\n};\n\nexport default Movies;"],"names":["axios","apiKEY","fetchTrendingDay","responce","data","fetchSearchMovie","value","console","log","fetchMovieDetails","id","fetchActors","fetchReviews","ContainerMovies","styled","Input","Field","Button","MoviesList","movies","location","useLocation","searchQuery","useParams","map","movie","to","state","from","title","useState","error","setError","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","results","length","moviesNew","getMovieBySearchQuery","initialValues","searchQueryForm","onSubmit","values","resetForm","searchQueryTrim","trim","handleSubmit","name","type","filter"],"sourceRoot":""}